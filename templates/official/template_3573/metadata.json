{
  "id": 3573,
  "name": "Create a RAG System with Paul Essays, Milvus, and OpenAI for Cited Answers",
  "description": "Create a RAG System with Paul Essays, Milvus, and OpenAI for Cited Answers\n\nThis workflow automates the process of creating a document-based AI retrieval system using Milvus, an open-source vector database. It consists of two main steps:\n\nData collection/processing\nRetrieval/response generation\n\nThe system scrapes Paul Graham essays, processes them, and loads them into a Milvus vector store. When users ask questions, it retrieves relevant information and generates responses with citations.\n\nStep 1: Data Collection and Processing\n\nSet up a Milvus server using the official guide\nCreate a collection named \"my_collection\"\nExecute the workflow to scrape Paul Graham essays:\n   Fetch essay lists\n   Extract names\n   Split content into manageable items\n   Limit results (if needed)\n   Fetch texts\n   Extract content\n   Load everything into Milvus Vector Store\n\nThis step uses OpenAI embeddings for vectorization.\n\nStep 2: Retrieval and Response Generation\n\nWhen a chat message is received, the system:\n\nSets chunks to send to the model\nRetrieves relevant information from the Milvus Vector Store\nPrepares chunks\nAnswers the query based on those chunks\nComposes citations\nGenerates a comprehensive response\n\nThis process uses OpenAI embeddings and models to ensure accurate and relevant answers with proper citations.\n\nFor more information on vector databases and similarity search, visit Milvus documentation.\n",
  "totalViews": 436,
  "source": "official",
  "user": {
    "id": 93835,
    "name": "Cheney Zhang",
    "username": "zc277584121",
    "bio": "Algorithm engineer at Zilliz, dedicating to the application of vector databases in the AI ecosystem.\n",
    "verified": true,
    "links": "[\"https://www.linkedin.com/in/cheney-zhang-61b795318/\"]",
    "avatar": "https://gravatar.com/avatar/cfb063861c079e38b42c0161a274d139f415fa00288929f3e44bdb828433a3b0?r=pg&d=retro&size=200"
  },
  "categories": [
    "Development",
    "Core Nodes",
    "AI",
    "Langchain"
  ],
  "nodes": [
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers",
          "Data Transformation"
        ]
      }
    },
    {
      "name": "HTML",
      "type": "n8n-nodes-base.html",
      "categories": [
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Data Transformation"
        ]
      }
    },
    {
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Embeddings"
        ]
      }
    },
    {
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Language Models",
          "Root Nodes"
        ],
        "Language Models": [
          "Chat Models (Recommended)"
        ]
      }
    },
    {
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Text Splitters"
        ]
      }
    },
    {
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Document Loaders"
        ]
      }
    },
    {
      "name": "Information Extractor",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Chains",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "Milvus Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreMilvus",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Vector Stores",
          "Tools",
          "Root Nodes"
        ],
        "Tools": [
          "Other Tools"
        ]
      }
    }
  ],
  "nodeCount": 9,
  "createdAt": "2025-04-16T12:54:47.941Z",
  "path": "official/template_3573/workflow.json"
}