{
  "id": 3191,
  "name": "Automatically Save & Organize LINE Message Files in Google Drive with Sheets Logging",
  "description": "\nOverview\nThis workflow automatically saves files received via LINE Messaging API into Google Drive and logs the file details into a Google Sheet. It checks the file type against allowed types, organizes files into date-based folders and (optionally) file type–specific subfolders, and sends a reply message back to the LINE user with the file URL or an error message if the file type is not permitted.\n\nWho is this for?\nDevelopers & IT Administrators: Looking to integrate LINE with Google Drive and Sheets for automated file management.\nBusinesses & Marketing Teams: That want to automatically archive media files and documents received from users via LINE.\nAnyone Interested in No-Code Automation: Users who want to leverage n8n’s capabilities without heavy coding.\n\nWhat Problem Does This Workflow Solve?\nAutomated File Organization: Files received from LINE are automatically checked for allowed file types, then stored in a structured folder hierarchy in Google Drive (by date and/or file type).\nData Logging: Each file upload is recorded in a Google Sheet, providing an audit trail with file names, upload dates, URLs, and types.\nInstant Feedback: Users receive an immediate reply via LINE confirming the file upload, or an error message if the file type is not allowed.\nWhat This Workflow Does\n1. Receives Incoming Requests:\nA webhook node (\"LINE Webhook Listener\") listens for POST requests from LINE, capturing file upload events and associated metadata.\n\n2. Configuration Loading:\nA Google Sheets node (\"Get Config\") reads configuration data (e.g., parent folder ID, allowed file types, folder organization settings, and credentials) from a pre-defined sheet.\n\nData Merging & Processing:\nThe \"Merge Event and Config Data\" and \"Process Event and Config Data\" nodes merge and structure the event data with configuration settings.\nA \"Determine Folder Info\" node calculates folder names based on the configuration. If Store by Date is enabled, it uses the current date (or a specified date) as the folder name. If Store by File Type is also enabled, it uses the file’s type (e.g., image) for a subfolder.\n\n4. Folder Search & Creation:\nThe workflow searches for an existing date folder (\"Search Date Folder\").\nIf the date folder is not found, an IF node (\"Check Existing Date Folder\") routes to a \"Create Date Folder\" node.\nSimilarly, for file type organization, the workflow uses a \"Search FileType Folder\" node (with appropriate conditions) to look for a subfolder, or creates it if not found.\nThe \"Set Date Folder ID\" and \"Set Image Folder ID\" nodes capture and merge the resulting folder IDs.\nFinally, the \"Config final ParentId\" node sets the final target folder ID based on the configuration conditions:\n  Store by Date: TRUE, Store by File Type: TRUE: Use the file type folder (inside the date folder).\n  Store by Date: TRUE, Store by File Type: FALSE: Use the date folder.\n  Store by Date: FALSE, Store by File Type: TRUE: Use the file type folder.\n  Store by Date: FALSE, Store by File Type: FALSE: Use the Parent Folder ID from the configuration.\n\n5. File Retrieval and Validation:\nA HTTP Request node (\"Get File Binary Content\") fetches the file’s binary data from the LINE API.\nA Function node (\"Validate File Type\") checks if the file’s MIME type is included in the allowed list (e.g., \"audio|image|video\"). If not, it throws an error that is captured for the reply.\n\n6. File Upload and Logging:\nThe \"Upload File to Google Drive\" node uploads the validated binary file to the final target folder.\nAfter a successful upload, the \"Log File Details to Google Sheet\" node logs details such as file name, upload date, Google Drive URL, and file type into a designated Google Sheet.\n\n7. User Feedback:\nThe \"Check Reply Enabled Flag\" node checks if the reply feature is enabled.\nFinally, the \"Send LINE Reply Message\" node sends a reply message back to the LINE user with either the file URL (if the upload was successful) or an error message (if the file type was not allowed).\n\nSetup Instructions\n1. Google Sheets Setup:\nCreate a Google Sheet with two sheets:**\n  config: Include columns for Parent Folder Path, Parent Folder ID, Store by Date (boolean), Store by File Type (boolean), Allow File Types (e.g., “audio|image|video”), CurrentDate, Reply Enabled, and CHANNEL ACCESS TOKEN.\n  fileList: Create headers for File Name, Date Uploaded, Google Drive URL, and File Type.\n\nFor an example of the required format, check this Google Sheets template: Google Sheet Template\n\n\n2. Google Drive Credentials:\nSet up and authorize your Google Drive credentials in n8n.\n\n3. LINE Messaging API:\nConfigure your LINE Developer Console webhook to point to the n8n Webhook URL (\"Line Chat Bot\" node).\nEnsure you have the proper Channel Access Token stored in your Google Sheet.\n\n4. n8n Workflow Import:\nImport the provided JSON file into your n8n instance.\nVerify node connections and update any credential references as needed.\n\n5. Test the Workflow:\nSend a test message via LINE to confirm that files are properly validated, uploaded, logged, and that reply messages are sent.\n\nHow to Customize This Workflow\nAllowed File Types: Adjust the \"Validate File Type\" field in your config sheet to control which file types are accepted.\nFolder Structure: Modify the logic in the \"Determine Folder Info\" and subsequent folder nodes to change how folders are structured (e.g., use different date formats or add additional categorization).\nLogging: Update the \"Log File Details to Google Sheet\" node if you wish to log additional file metadata.\nReply Messages: Customize the reply text in the \"Send LINE Reply Message\" node to include more detailed information or instructions.",
  "totalViews": 1853,
  "source": "official",
  "user": {
    "id": 92667,
    "name": "Jaruphat J.",
    "username": "jaruphatj",
    "bio": "Project Manager who passionate about Automation & AI and continuously explore innovative ways to improve business processes through intelligent workflow automation. Let’s connect and automate the future! ",
    "verified": true,
    "links": "[\"https://www.youtube.com/@JaruphatJ\"]",
    "avatar": "https://gravatar.com/avatar/847eff98bf683847ee92dd56b7d8169f88e9e8f3d839590713d6eab45c59a72f?r=pg&d=retro&size=200"
  },
  "categories": [
    "Data & Storage",
    "Productivity",
    "Development",
    "Core Nodes"
  ],
  "nodes": [
    {
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "categories": [
        "Data & Storage",
        "Productivity"
      ],
      "subcategories": {}
    },
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "categories": [
        "Data & Storage"
      ],
      "subcategories": {}
    },
    {
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers",
          "Data Transformation"
        ]
      }
    }
  ],
  "nodeCount": 4,
  "createdAt": "2025-03-17T05:31:22.025Z",
  "path": "official/template_3191/workflow.json"
}