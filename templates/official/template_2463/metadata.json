{
  "id": 2463,
  "name": "Enrich Company Data from Google Sheet with OpenAI Agent and ScrapingBee",
  "description": "\nThis workflow demonstrates how to enrich data from a list of companies in a spreadsheet. While this workflow is production-ready if all steps are followed, adding error handling would enhance its robustness.\n\nImportant notes\n\nCheck legal regulations**: This workflow involves scraping, so make sure to check the legal regulations around scraping in your country before getting started. Better safe than sorry!\nMind those tokens**: OpenAI tokens can add up fast, so keep an eye on usage unless you want a surprising bill that could knock your socks off! ðŸ’¸\n\nMain Workflow\n\nNode 1 - Webhook\nThis node triggers the workflow via a webhook call. You can replace it with any other trigger of your choice, such as form submission, a new row added in Google Sheets, or a manual trigger.\n\nNode 2 - Get Rows from Google Sheet\nThis node retrieves the list of companies from your spreadsheet. \nhere is the Google Sheet Template you can use.\nThe columns in this Google Sheet are:\n\nCompany**: The name of the company\nWebsite**: The website URL of the company  \n  These two fields are required at this step.\n\nBusiness Area**: The business area deduced by OpenAI from the scraped data\nOffer**: The offer deduced by OpenAI from the scraped data\nValue Proposition**: The value proposition deduced by OpenAI from the scraped data\nBusiness Model**: The business model deduced by OpenAI from the scraped data\nICP**: The Ideal Customer Profile deduced by OpenAI from the scraped data\nAdditional Information**: Information related to the scraped data, including:\n  Information Sufficiency:\n    Description: Indicates if the information was sufficient to provide a full analysis.\n    Options: \"Sufficient\" or \"Insufficient\"\n  Insufficient Details:\n    Description: If labeled \"Insufficient,\" specifies what information was missing or needed to complete the analysis.\n  Mismatched Content:\n    Description: Indicates whether the page content aligns with that of a typical company page.\n  Suggested Actions:\n    Description: Provides recommendations if the page content is insufficient or mismatched, such as verifying the URL or searching for alternative sources.\n\nNode 3 - Loop Over Items\nThis node ensures that, in subsequent steps, the website in \"extra workflow input\" corresponds to the row being processed. You can delete this node, but you'll need to ensure that the \"query\" sent to the scraping workflow corresponds to the website of the specific company being scraped (rather than just the first row).\n\nNode 4 - AI Agent\nThis AI agent is configured with a prompt to extract data from the content it receives. The node has three sub-nodes:\n  \n  OpenAI Chat Model: The model used is currently gpt4-o-mini.\n  Call n8n Workflow: This sub-node calls the workflow to use ScrapingBee and retrieves the scraped data.\n  Structured Output Parser: This parser structures the output for clarity and ease of use, and then adds rows to the Google Sheet.\n\nNode 5 - Update Company Row in Google Sheet\nThis node updates the specific company's row in Google Sheets with the enriched data.\n\nScraper Agent Workflow\n\nNode 1 - Tool Called from Agent\nThis is the trigger for when the AI Agent calls the Scraper. A query is sent with:\nCompany name\nWebsite (the URL of the website)\n\nNode 2 - Set Company URL\nThis node renames a field, which may seem trivial but is useful for performing transformations on data received from the AI Agent.\n\nNode 3 - ScrapingBee: Scrape Company's Website\nThis node scrapes data from the URL provided using ScrapingBee. You can use any scraper of your choice, but ScrapingBee is recommended, as it allows you to configure scraper behavior directly. Once configured, copy the provided \"curl\" command and import it into n8n.\n\nNode 4 - HTML to Markdown\nThis node converts the scraped HTML data to Markdown, which is then sent to OpenAI. The Markdown format generally uses fewer tokens than HTML.\n\nImproving the Workflow\nIt's always a pleasure to share workflows, but creators sometimes want to keep some magic to themselves âœ¨. Here are some ways you can enhance this workflow:\n\nHandle potential errors\nConfigure the scraper tool to scrape other pages on the website. Although this will cost more tokens, it can be useful (e.g., scraping \"Pricing\" or \"About Us\" pages in addition to the homepage).\nInstead of Google Sheets, connect directly to your CRM to enrich company data.\nTrigger the workflow from form submissions on your website and send the scraped data about the lead to a Slack or Teams channel.\n",
  "totalViews": 7559,
  "source": "official",
  "user": {
    "id": 91734,
    "name": "Dataki",
    "username": "dataki",
    "bio": "I am passionate about transforming complex processes into seamless automations with n8n. My expertise spans across creating ETL pipelines, sales automations, and data & AI-driven workflows. As an avid problem solver, I thrive on optimizing workflows to drive efficiency and innovation.",
    "verified": true,
    "links": "[\"https://www.linkedin.com/in/nicolas-aknin/\"]",
    "avatar": "https://gravatar.com/avatar/0437c659b1ec6916896ebb30cc237391f0e1de89df5465c103e12d2cb12ce42d?r=pg&d=retro&size=200"
  },
  "categories": [
    "Data & Storage",
    "Productivity",
    "Development",
    "Core Nodes",
    "AI",
    "Langchain"
  ],
  "nodes": [
    {
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "categories": [
        "Data & Storage",
        "Productivity"
      ],
      "subcategories": {}
    },
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Agents",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Language Models",
          "Root Nodes"
        ],
        "Language Models": [
          "Chat Models (Recommended)"
        ]
      }
    },
    {
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Output Parsers"
        ]
      }
    },
    {
      "name": "Call n8n Workflow Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Tools"
        ],
        "Tools": [
          "Recommended Tools"
        ]
      }
    }
  ],
  "nodeCount": 6,
  "createdAt": "2024-10-16T15:54:36.622Z",
  "path": "official/template_2463/workflow.json"
}