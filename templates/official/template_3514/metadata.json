{
  "id": 3514,
  "name": "Build an MCP Server with Google Calendar and Custom Functions",
  "description": "Learn how to build an MCP Server and Client in n8n with official nodes.\n\n&gt; âš  Requires n8n version 1.88.0 or higher.\n\nIn this example, we use Google Calendar and custom functions as two separate MCP Servers, demonstrating how to integrate both native and custom tools.\n\nHow it works\n\nThe AI Agent connects to two MCP Servers. Each MCP Trigger (Server) generates a URL exposing its tools. This URL is used by an MCP Client linked to the AI Agent.\n\nWhenever you make changes to the tools, thereâ€™s no need to modify the MCP Client. It automatically keeps the AI Agent informed on how to use each tool, even if you change them over time.\n\nThatâ€™s the power of MCP ðŸ™Œ\n\nWho is this template for\n\nAnyone looking to use MCP with their AI Agents.\n\nHow to set up\n\nInstructions are included within the workflow itself.\n\nCheck out my other templates\n\nðŸ‘‰ https://n8n.io/creators/solomon/",
  "totalViews": 30775,
  "source": "official",
  "user": {
    "id": 91663,
    "name": "Solomon",
    "username": "solomon",
    "bio": "Freelance consultant from Brazil, specializing in automations and data analysis. I work with select clients, addressing their toughest projects.\n\nFor business inquiries, email me at automations.solomon@gmail.com or message me on Telegram for a faster response.",
    "verified": true,
    "links": "[\"https://t.me/salomaoguilherme\"]",
    "avatar": "https://gravatar.com/avatar/79aa147f090807fe0f618fb47a1de932669e385bb0c84bf3a7f891ae7d174256?r=pg&d=retro&size=200"
  },
  "categories": [
    "Development",
    "Core Nodes",
    "AI",
    "Langchain"
  ],
  "nodes": [
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "DebugHelper",
      "type": "n8n-nodes-base.debugHelper",
      "categories": [
        "Development"
      ],
      "subcategories": {}
    },
    {
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Agents",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Language Models",
          "Root Nodes"
        ],
        "Language Models": [
          "Chat Models (Recommended)"
        ]
      }
    },
    {
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Memory"
        ],
        "Memory": [
          "For beginners"
        ]
      }
    },
    {
      "name": "Call n8n Workflow Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Tools"
        ],
        "Tools": [
          "Recommended Tools"
        ]
      }
    },
    {
      "name": "MCP Client Tool",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Model Context Protocol",
          "Tools"
        ]
      }
    }
  ],
  "nodeCount": 7,
  "createdAt": "2025-04-10T16:33:11.142Z",
  "path": "official/template_3514/workflow.json"
}