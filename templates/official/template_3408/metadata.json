{
  "id": 3408,
  "name": "AI YouTube Playlist & Video Analyst Chatbot",
  "description": "AI YouTube Playlist & Video Analyst Chatbot\n\nThis n8n workflow transforms entire YouTube playlists or single videos into interactive knowledge bases you can chat with. Ask questions and get summaries without needing to watch hours of content.\n\nüåü How it Works\n\nüîó Provide a Link: Start by giving the workflow a URL for a YouTube playlist or a single video.\nüìÑ Content Retrieval: The workflow automatically fetches the video details and transcripts for the provided link. For playlists, it can process multiple videos at once (you might be asked how many).\nüß† AI Processing: Google's Gemini AI reads through the transcripts, understands the content, and creates summaries.\nüíæ Storage & Context: The processed information and summaries are stored in a vector database (Qdrant), making them ready for conversation. Context is managed using Redis, remembering the current video/playlist you're discussing.\nüí¨ Chat & Ask: Now, you can ask the AI agent questions about the playlist or video content! Because context is maintained, you can ask follow-up questions (like \"expand on point X\") without needing to provide the URL again.\n\nüõ†Ô∏è Requirements\n\nCommunity Node:** This workflow uses the youtubeTranscripter community node to fetch video transcripts. You'll need to install it in your n8n environment.\n    Installation: npm install n8n-nodes-youtube-transcription-dmr\n    Important: Community nodes require a self-hosted n8n instance.\nRedis:** A Redis instance is required for managing conversation context and status between interactions.\nCredentials:** You will need API credentials configured in your n8n instance for:\n    Google Gemini (AI Models)\n    Qdrant (Vector Store)\n    Redis (Context Store)\n\nü§ñ AI Agent Capabilities\n\nEngage with the AI agent to explore the video content. Since the agent remembers the context of your conversation, you can ask detailed follow-up questions naturally:\n\nGet a quick summary of a single video or an entire playlist.\nAsk for key takeaways or main topics discussed.\nQuery for specific information mentioned in the videos.\nAsk the agent to elaborate on a specific point previously mentioned.\nUnderstand complex subjects without watching the full duration.\n\nüöÄ Use Cases\n\nüìä Content Analysis:** Quickly understand the themes and key points across a playlist or long video.\nüìö Research & Learning:** Extract insights from educational series or tutorials efficiently.\n‚úçÔ∏è Content Creation:** Easily repurpose video transcript information into blog posts, notes, or social media content.\n‚è±Ô∏è Save Time:** Get the essence of video content when you're short on time.\n‚ôø Accessibility:** Offers a text-based way to interact with and understand video content.\n\n‚ú® Sample Prompts\n\nPlease analyze this playlist and tell me the main topics covered: [YouTube Playlist URL]\nSummarize the first 5 videos in this playlist: [YouTube Playlist URL]\n(Follow-up) Tell me more about the main point in video 3.\nWhat are the key points discussed in this video? [YouTube Video URL]\n(Follow-up) Expand on the second key point you mentioned.\nDoes the video at [YouTube Video URL] mention [specific topic]?",
  "totalViews": 1588,
  "source": "official",
  "user": {
    "id": 93528,
    "name": "dmr",
    "username": "dmr",
    "bio": "",
    "verified": false,
    "links": "[]",
    "avatar": "https://gravatar.com/avatar/8f3c6f9bc1a0f7f73d3421323e7fbd024f8dd48e8f97bb4a16ae77865d33394a?r=pg&d=retro&size=200"
  },
  "categories": [
    "Development",
    "Core Nodes",
    "Data & Storage",
    "AI",
    "Langchain"
  ],
  "nodes": [
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "Redis",
      "type": "n8n-nodes-base.redis",
      "categories": [
        "Development",
        "Data & Storage"
      ],
      "subcategories": {}
    },
    {
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers",
          "Data Transformation"
        ]
      }
    },
    {
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Agents",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Chains",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Memory"
        ],
        "Memory": [
          "For beginners"
        ]
      }
    },
    {
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Output Parsers"
        ]
      }
    },
    {
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Text Splitters"
        ]
      }
    },
    {
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Document Loaders"
        ]
      }
    },
    {
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Vector Stores",
          "Tools",
          "Root Nodes"
        ],
        "Tools": [
          "Other Tools"
        ]
      }
    },
    {
      "name": "Embeddings Google Gemini",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Embeddings"
        ]
      }
    },
    {
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Language Models",
          "Root Nodes"
        ],
        "Language Models": [
          "Chat Models (Recommended)"
        ]
      }
    },
    {
      "name": "Vector Store Question Answer Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Tools"
        ],
        "Tools": [
          "Other Tools"
        ]
      }
    }
  ],
  "nodeCount": 13,
  "createdAt": "2025-04-02T13:25:05.835Z",
  "path": "official/template_3408/workflow.json"
}