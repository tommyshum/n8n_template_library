{
  "id": 2938,
  "name": "Googleform submission to create a Github issue bug report ",
  "description": "Automated Workflow for Google Form Submissions, GitHub Issues, and Discord Notifications\n\nThis workflow streamlines how new Google Form submissions are processed by automatically creating GitHub issues and sending real-time notifications to a Discord channel through a webhook.\n\nWho Is This Template For?\nDevelopers** looking to centralize bug reporting and issue tracking.  \nProject Managers** seeking an efficient way to log tasks and updates.  \nQA Teams** that need a fast, automated process for reporting and resolving issues.  \n\nWorkflow Overview\n\nGoogle Form Trigger  \n   The workflow begins with a Google Sheets Trigger node that checks for new form submissions every minute.\n\nAdd New Form Submissions to Google Sheets  \n   Each new submission is recorded in a dedicated Google Sheet for easy reference and archiving.\n\nFilter Out Already Posted Issues  \n   An If node checks if the issue is already posted on GitHub by looking for an existing GitHub link in the sheet.\n\nFormat Message / Output Parsing  \n   If the issue is new, an OpenAI Chat Model node generates a structured output, including a title, description, and suggested fix.\n\nAdd Issue to GitHub  \n   The structured output is used to create a new issue in the specified GitHub repository.\n\nSend Notification to Discord  \n   A Discord webhook is triggered to send a notification to your chosen channel, including a link to the newly created GitHub issue.\n\nAdd GitHub Link to the Sheet  \n   The GitHub issue link is added back to the Google Sheet for easy cross-referencing.\n\nSetup Steps\n\n1. Google Sheets Setup\nCreate/Designate a Google Sheet:** Ensure it’s set to receive form submissions.  \nConfigure the Trigger Node:** Provide the correct document ID and sheet name in the Google Sheets Trigger node.\n\n2. OpenAI Configuration\nAPI Credentials:** Set up the OpenAI Chat Model node with valid OpenAI API credentials.  \nPrompt Definition:** Create a prompt that formats the form submission data into a structured output (e.g., title, description, suggested fix).\n\n3. GitHub Configuration\nOAuth Credentials:** Configure the GitHub node with your GitHub OAuth credentials.  \nTarget Repository:** Specify the repository where new issues should be created.\n\n4. Discord Webhook\nWebhook URL:** Obtain a webhook URL from your Discord server.  \nNotification Setup:** Use the HTTP Request node to send notifications to your chosen Discord channel.\n\n5. Google Sheets Update\nDocument & Sheet Name:** Provide the same Google Sheet details used in the first step.  \nAdd GitHub Link:** Update the corresponding row with the newly created GitHub issue link.\n\nRecommended Google Sheet Columns\nTimestamp**: Automatically recorded when the form is submitted.  \nIssue Title**: Generated by the OpenAI Chat Model.  \nIssue Description**: Detailed breakdown of the issue.  \nGitHub Link**: Automatically populated once the issue is created.  \nDiscord Notification Status** (optional): Indicates whether the notification was sent successfully.\n\nAdditional Notes\nDuplicate Prevention**: The conditional logic ensures existing issues aren’t recreated on GitHub.  \nAI-Powered Formatting**: OpenAI helps structure the issue details, providing clarity for developers.  \nReal-Time Alerts**: Discord notifications keep your entire team updated on new issues as they arise.\n",
  "totalViews": 322,
  "source": "official",
  "user": {
    "id": 92789,
    "name": "xerang",
    "username": "chrisv",
    "bio": "",
    "verified": false,
    "links": "[\"https://x.com/BigMothaTrucka\"]",
    "avatar": "https://gravatar.com/avatar/2cba99f88306da27c4d42d453aa319c7a410b2509f64faf64cf0a7ee469fd33a?r=pg&d=retro&size=200"
  },
  "categories": [
    "Development",
    "Data & Storage",
    "Productivity",
    "Core Nodes",
    "AI",
    "Langchain"
  ],
  "nodes": [
    {
      "name": "GitHub",
      "type": "n8n-nodes-base.github",
      "categories": [
        "Development"
      ],
      "subcategories": {}
    },
    {
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "categories": [
        "Data & Storage",
        "Productivity"
      ],
      "subcategories": {}
    },
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Agents",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Language Models",
          "Root Nodes"
        ],
        "Language Models": [
          "Chat Models (Recommended)"
        ]
      }
    },
    {
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Memory"
        ],
        "Memory": [
          "For beginners"
        ]
      }
    },
    {
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Output Parsers"
        ]
      }
    }
  ],
  "nodeCount": 7,
  "createdAt": "2025-02-18T17:32:20.487Z",
  "path": "official/template_2938/workflow.json"
}