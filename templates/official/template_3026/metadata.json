{
  "id": 3026,
  "name": "Run Apache Airflow DAG and Retrieve XCom Value",
  "description": "Run Apache Airflow DAG and Retrieve XCom Value\n\nWhat this workflow does\n\nThis workflow integrates the Apache Airflow API DAGRun and XCom. It enables n8n to trigger Airflow DAGs and retrieve the execution results.\n\nPreparation:\n\nUpdate Airflow API Link Prefix\n\n   Navigate to the airflow-api node.\n   Update the prefix of the Airflow API link in the format: http(s)://ip:port.\n   Example: https://airflow.example.com\n\nConfigure Authentication\n\n   Go to the Airflow: dag_run node.\n   Update the Basic Auth credentials with your Airflow username and password.\n   Repeat this step for Airflow: dag_run - state and Airflow: dag_run - get result nodes.\n\n   Security Note: Using Basic Authentication requires storing credentials in plaintext. If possible, consider using API Keys or Tokens for enhanced security.\n\n   An example is setting Airflow's API Authentication to basic\\_auth. Choose other authentication methods if needed.\n   Ensure the user account has the following permissions: can create on DAG Runs, can read on DAG Runs, can read on XComs, can edit on DAGs, and can read on DAGs.\n\nHow to Use:\n\nTo execute this workflow, use the Execute Sub-workflow node with the following input parameters:\n\ndag\\_id**: The DAG ID (name) in Airflow that you want to trigger.\ntask\\_id**: The Task ID (name) from which you want to retrieve the XCom return\\_value.\nconf**: Input data for the Airflow DAG run.\nwait**: Delay (in seconds) between each Airflow: dag_run - state check.\nwait\\_time**: The maximum time (in seconds) to wait for Airflow: dag_run - state before returning an error.\n\nOutput:\n\nThe workflow returns the XCom result from Airflow: dag_run - get result.\nThe XCom return_value is stored in the value field.\n",
  "totalViews": 239,
  "source": "official",
  "user": {
    "id": 92949,
    "name": "Antonio Cheong",
    "username": "windoac",
    "bio": "",
    "verified": false,
    "links": "[]",
    "avatar": "https://gravatar.com/avatar/fbc7bb10b6bc8af6a9c2c2d91bcb695ff173ffb70f8c2aec4149719886fce3e0?r=pg&d=retro&size=200"
  },
  "categories": [
    "Development",
    "Core Nodes"
  ],
  "nodes": [
    {
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers"
        ]
      }
    },
    {
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers",
          "Data Transformation"
        ]
      }
    }
  ],
  "nodeCount": 2,
  "createdAt": "2025-02-27T06:42:48.457Z",
  "path": "official/template_3026/workflow.json"
}