{
  "id": 3599,
  "name": "Log meal nutrients from Telegram to Google Sheets using an AI agent",
  "description": "Who is this for?\n\nThis workflow is ideal for individuals focused on nutrition tracking, meal planning, or diet optimization—whether you’re a health-conscious individual, fitness coach, or developer working on a healthtech app. It also fits well for anyone who wants to capture their meal data via voice or text, without manually entering everything into a spreadsheet.\n\nWhat problem is this workflow solving?\n\nManually logging meals and breaking down their nutritional content is time-consuming and often skipped. This workflow automates that process using Telegram for input, OpenAI for natural language understanding, and Google Sheets for structured tracking. It enables users to record meals by typing or sending voice messages, which are transcribed, analyzed for nutrients, and automatically stored for tracking and review.\n\nWhat this workflow does\nThis n8n automation lets users send either a text or voice message to a Telegram bot describing their meal. The workflow then:\nReceives the Telegram message\nChecks if it’s a voice message\n\t•\tIf yes: Downloads the audio file and transcribes it using OpenAI\n\t•\tIf no: Uses the text input directly\nSends the meal description to OpenAI to extract a structured list of ingredients and nutritional details\nParses and stores the results in Google Sheets\nResponds via Telegram with a personalized confirmation message\n\nA testing interface also allows you to simulate prompts and view structured outputs for development or debugging.\n\nSetup\nCreate a Telegram bot via BotFather and note the API token.\nCreate an empty Google Sheet and store the sheet ID in the environment.\nSet up your OpenAI credentials in the n8n credential manager.\nCustomize the “List of Ingredients and Nutrients” node with your prompt if needed.\n(Optional) Use the “Testing” section to simulate messages and refine outputs before going live.\n\nHow to customize this workflow to your needs\n• Enhance prompts in the OpenAI node to improve the structure and accuracy of responses.\n• Add new fields in the Google Sheet and corresponding logic in the parser if you want more detail.\n• Adjust the Telegram response to provide motivational feedback, dietary tips, or summaries.\n• Upgrade to the “Pro” version mentioned in the contact section for USDA database integration and complete nutrient breakdowns.\n\nThis is a lightweight, AI-powered meal logging automation that transforms voice or text into actionable nutrition data—perfect for making healthy eating easier and more data-driven.\n\nSee my other workflows here",
  "totalViews": 1154,
  "source": "official",
  "user": {
    "id": 92501,
    "name": "PollupAI",
    "username": "zeerobug",
    "bio": "We create bespoke AI solutions, automations and agents that help your business as it scales.",
    "verified": true,
    "links": "[\"https://pollup.ai\"]",
    "avatar": "https://gravatar.com/avatar/6d3d2053279bc63e9be7bf4cd3fb74e13e7cc1309d32eab0b72140332cff577e?r=pg&d=retro&size=200"
  },
  "categories": [
    "Data & Storage",
    "Productivity",
    "Communication",
    "HITL",
    "Development",
    "Core Nodes",
    "AI",
    "Langchain"
  ],
  "nodes": [
    {
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "categories": [
        "Data & Storage",
        "Productivity"
      ],
      "subcategories": {}
    },
    {
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "categories": [
        "Communication",
        "HITL"
      ],
      "subcategories": {
        "HITL": [
          "Human in the Loop"
        ]
      }
    },
    {
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "categories": [
        "Development",
        "Core Nodes"
      ],
      "subcategories": {
        "Core Nodes": [
          "Helpers",
          "Data Transformation"
        ]
      }
    },
    {
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Agents",
          "Root Nodes"
        ]
      }
    },
    {
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Language Models",
          "Root Nodes"
        ],
        "Language Models": [
          "Chat Models (Recommended)"
        ]
      }
    },
    {
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Output Parsers"
        ]
      }
    },
    {
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "categories": [
        "AI",
        "Langchain"
      ],
      "subcategories": {
        "AI": [
          "Agents",
          "Miscellaneous",
          "Root Nodes"
        ]
      }
    }
  ],
  "nodeCount": 7,
  "createdAt": "2025-04-18T08:53:18.483Z",
  "path": "official/template_3599/workflow.json"
}